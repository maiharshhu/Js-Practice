// // -----------------------Bitwise AND (&)-------------------------------
// The bitwise AND (&) operator returns a number or BigInt whose binary representation has a 1 in each bit position for which the corresponding bits of both operands are 1
// const a = 5; // 00000000000000000000000000000101
// const b = 3; // 00000000000000000000000000000011

console.log(a & b); // 00000000000000000000000000000001
// Expected output: 1

// x & y

// 9  (00000000000000000000000000001001)
// 14 (00000000000000000000000000001110)

// 14 & 9;
// // 8  (00000000000000000000000000001000)

// 14n & 9n; // 8n

//---------------->>>>Bitwise AND assignment (&)----------------------------------
// The bitwise AND assignment (&=) operator performs bitwise AND on the two operands and assigns the result to the left operand.
// let a = 5; // 00000000000000000000000000000101
// a &= 3; // 00000000000000000000000000000011

// console.log(a); // 00000000000000000000000000000001
// Expected output: 1

// Bitwise NOT (~)
// const a = 5; // 00000000000000000000000000000101
// const b = -3; // 11111111111111111111111111111101

// console.log(~a); // 11111111111111111111111111111010
// // Expected output: -6

// console.log(~b); // 00000000000000000000000000000010
// // Expected output: 2

// ~0; // -1
// ~-1; // 0
// ~1; // -2

// ~0n; // -1n
// ~4294967295n; // -4294967296n

// ------------------->>>>>>>>>>>>>>>>>>>>>Bitwise OR (|)-----------------------------------
// const a = 5; // 00000000000000000000000000000101
// const b = 3; // 00000000000000000000000000000011

// console.log(a | b); // 00000000000000000000000000000111
// Expected output: 7

// const a = 5; // 00000000000000000000000000000101
// const b = 3; // 00000000000000000000000000000011

// console.log(a | b); // 00000000000000000000000000000111
// // Expected output: 7

// x | y

// // 9  (00000000000000000000000000001001)
// // 14 (00000000000000000000000000001110)

// 14 | 9;
// // 15 (00000000000000000000000000001111)

// 14n | 9n; // 15n
